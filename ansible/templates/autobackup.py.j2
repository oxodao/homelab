# !!!!!!!!!!!!!!!!!!!!!
# !    WIP SCRIPT     !
# !NOT READY FOR USAGE!
# !!!!!!!!!!!!!!!!!!!!!

import requests
import os
import subprocess

DRY = True
_, HOSTNAME, _, _, _ = os.uname()

APPS = [
    {
        'name': 'gitea',
        'excluded_path': [],
        'data_dir': '/mnt/git'
    },
    {
        'name': 'jellyfin',
        'excluded_path': [],
    },
    {
        'name': 'paperless',
        'excluded_path': [],
    },
    {
        'name': 'homeassistant',
        'excluded_path': [

        ],
    },
]

os.environ['B2_ACCOUNT_ID'] = '{{backup_b2_account_id}}'
os.environ['B2_ACCOUNT_KEY'] = '{{backup_b2_account_key}}'
os.environ['RESTIC_REPOSITORY'] = '{{backup_restic_repository}}'
os.environ['RESTIC_PASSWORD'] = '{{backup_restic_password}}'

def alert(msg):
    print (msg)

    if DRY:
        return

    requests.post(
        '{{backup_discord_hook}}',
        json={
            'username': 'Backup Bot',
            'content': msg,
        }
    )

def run(cmd):
    if DRY:
        alert(f'>>> {cmd}')
        return 0

    p = subprocess.Popen(
        ['bash', '-c', cmd],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )

    output, _ = p.communicate()

    if p.returncode != 0:
        alert(f'Failed to run {cmd}:\n{output.decode()}')

    return 0, output.decode()

def backup_data_dir(app):
    alert('backup dir ', app['data_dir'])

def backup_app(app):
    base_path = f'/opt/{{ansible_username}}/{app_name}'
    app_name = app['name']
    excluded_path = app['excluded_path']

    precmd = f'cd {base_path} &&'

    print(f'- Stopping {app_name}')
    status = run(f'{precmd} /usr/bin/docker compose down')
    if status != 0:
        return

    exclusions = (' ' if len(excluded_path) > 0 else '') + ' '.join(['--exclude ' + excl for excl in excluded_path])

    status = run(f'restic --verbose backup --tag {app_name}{exclusions} {base_path}')
    if status == 0:
        alert(f'- {app_name} backed up !')

        if 'data_dir' in app and app['data_dir']:
            backup_data_dir(app)
    else:
        alert('Skipping backup data dirs')

    alert(f'- Restarting {app_name}')
    run(f'{precmd} /usr/bin/docker compose up -d')

alert(f'-- Starting homelab ({HOSTNAME}) backup --{" DRY RUN" if DRY else ""}')

for app in APPS:
    backup_app(app)

alert(f'Backup complete!')